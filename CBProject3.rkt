#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.10 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 4805 0 28 3 16 #"#lang plai-typed"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"print-only-errors"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;Chris Betsill PROJECT 3"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; Updated after I talked with you in Office hours"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; type for surface representations"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"numS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"varS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"appS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 3 #") ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"plusS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 3 #") ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"bminusS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 3 #") ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"multS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 3 #") ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"uminusS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"lamS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"param"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"withS"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 12 #"binding-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 3 #") ("
0 0 14 3 10 #"bound-body"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"boxS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"unboxS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"setboxS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 3 #") ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"setS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"seqS"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 3 #") ("
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"if0S"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 3 #") ("
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 3 #") ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"recS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 3 #") ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"consS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"firstS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"restS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"emptyS"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; type for core representations"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"numC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"varC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"plusC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"multC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"lamC"
0 0 24 3 2 #" ("
0 0 14 3 5 #"param"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"boxC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"unboxC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"setboxC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"setC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"seqC"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"if0C"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"consC"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"firstC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"restC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"emptyC"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; types for values"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"numV"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"closV"
0 0 24 3 2 #" ("
0 0 14 3 5 #"param"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"boxV"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"consV"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"emptyV"
0 0 24 3 2 #"] "
0 0 17 3 23 #";; used for end of list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"nullV"
0 0 24 3 2 #"] "
0 0 17 3 43 #";; null value to initialize store values to"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; types and defs for Environments and Stores"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 17 #"define-type-alias"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 7 #"Binding"
0 0 24 3 2 #" ["
0 0 14 3 4 #"bind"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 3 #"loc"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 17 #"define-type-alias"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Binding"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"mt-Env"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 4 #"cons"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 17 #"define-type-alias"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 2 #" ("
0 0 14 3 8 #"vectorof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"override-store"
0 0 24 3 2 #" ["
0 0 14 3 3 #"loc"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-Store"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 8 #"my-Store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"store-size"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-Store"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 24 3 1 #" "
0 0 14 3 10 #"store-size"
0 0 24 3 2 #" ("
0 0 14 3 5 #"nullV"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"free-list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 24 3 1 #" "
0 0 14 3 10 #"store-size"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"list-env"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 24 3 1 #" "
0 0 14 3 10 #"store-size"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; Allocation -- O(n) -- has to loop through the list "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"find-free"
0 0 24 3 2 #" ["
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"] ["
0 0 14 3 7 #"current"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 89
(
 #"; returns the location where there are free spaces equal to the spec"
 #"ified number of cells"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 2 #"<="
0 0 24 3 2 #"  "
0 0 14 3 10 #"store-size"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"find-free"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Out of memory!\""
0 0 24 3 3 #")] "
0 0 17 3 82
(
 #"; if the enviornment is the same size of mem, throw error (prevents "
 #"infinate loop)"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 2 #"  "
0 0 14 3 10 #"store-size"
0 0 24 3 2 #") "
0 0 17 3 61
#";; if the current index is equal to the store size trigger GC"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 15 #"garbage-collect"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"find-free"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          )]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"free-list"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 2 #") "
0 0 17 3 31 #";; if the current index is free"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"free-list"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 17 3 14 #";; allocate it"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 7 #"current"
0 0 24 3 3 #")] "
0 0 17 3 15 #";; return index"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"find-free"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 7 #")])])] "
0 0 17 3 32 #";; if its not free, keep looking"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 10 #"store-size"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 17 3 90
(
 #";; if the current index is equal to the store size -1  triggerGC, si"
 #"nce cons need 2 spaces"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 15 #"garbage-collect"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"has2adjacent?"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 17 3 81
(
 #";; insure there are two adjacent spots in store for cons (prevents i"
 #"nfinate loop)"
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"find-free"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"free-list"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 3 #") ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"free-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 4 #"))) "
0 0 17 3 46 #";; if the index and its adjacent cell are free"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"free-list"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 17 3 17 #";; allocate first"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"free-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 17 3 19 #"; allocate adjacent"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 7 #"current"
0 0 24 3 3 #")] "
0 0 17 3 42 #";; return the index of the first1222222222"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"find-free"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 9 #")])])])) "
0 0 17 3 15 #";; keep looking"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"new-loc"
0 0 24 3 2 #" ["
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 71
(
 #";; allocates n (1 or 2) memory cells, and returns the index for stor"
 #"age"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"new-loc"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"Invalid Argument: new-loc can only allocate 1 or 2 locations\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"find-free"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"free-loc"
0 0 24 3 2 #" ["
0 0 14 3 7 #"address"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 3 3 #"] ["
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 97
(
 #"; used to free the number of cells (1 or 2) at the location in free-"
 #"list specified by the address"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"free-list"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"free-list"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"free-list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"has2adjacent?"
0 0 24 3 2 #" ["
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"]) "
0 0 17 3 7 #";; O(n)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 70
(
 #";; returns true if there are two adjacent free spaces in the free-li"
 #"st"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 10 #"store-size"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"has2adjacent?"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"Out of memory! - no two adjacent slots\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"free-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 3 #") ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"free-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"has2adjacent?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 7 #"))])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #";; Garbage Collection -- loops through env, and for each element in "
 #"env must follow pointers "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"garbage-collect"
0 0 24 3 2 #" ["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 79
(
 #"; used to collect garbage when there are not enough available free m"
 #"emory cells"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 6 #"in-use"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 8 #"bind-loc"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #")] "
0 0 17 3 33 #";; make a list of all locs in env"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 6 #"linked"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-linked"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 3 #")] "
0 0 17 3 39 #";; build list of all nested cons or box"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"garb"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-garbage"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 1 #" "
0 0 14 3 6 #"linked"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 4 #")]) "
0 0 17 3 36 #";; list of all not in use and linked"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 10 #"store-size"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"garb"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"garbage-collect"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Out of memory!\""
0 0 24 3 3 #")] "
0 0 17 3 100
(
 #";; if no garb can be collected or if the size of env > store-size th"
 #"en throw out of memory exception"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 2 #") "
0 0 19 3 22 #"\" <--- Current ENV \\n\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 24 3 1 #" "
0 0 14 3 6 #"linked"
0 0 24 3 2 #") "
0 0 19 3 15 #"\"<--- Linked\\n\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-Store"
0 0 24 3 2 #") "
0 0 19 3 45 #"\" <--- Current Store \\n collecting garbage\\n\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"garb"
0 0 24 3 3 #")) "
0 0 19 3 17 #"\" cells found : \""
0 0 24 3 4 #")  ("
0 0 14 3 9 #"to-string"
0 0 24 3 1 #" "
0 0 14 3 4 #"garb"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 11 #"remove-garb"
0 0 24 3 1 #" "
0 0 14 3 4 #"garb"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-linked"
0 0 24 3 2 #" ["
0 0 14 3 6 #"in-use"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 4 #")]) "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #") "
0 0 17 3 54 #";; O(n) loops, but the calls to follow add complexity "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 129
(
 #";builds a list of the locations any boxes or cons are pointing too, "
 #"to prevent them from getting removed by the garbage collector"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"boxV?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 4 #"))) "
0 0 17 3 27 #";; is the item in use a box"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"append"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"follow"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"get-linked"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 5 #")))] "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 10 #"store-size"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #"))  ("
0 0 14 3 6 #"consV?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 6 #"))))) "
0 0 17 3 88
(
 #";; if the adjacent item in the store is consV we need to ensure the "
 #"list doesnt get GC'd"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"append"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 3 #")) "
0 0 17 3 29 #";;  add the index of pointer "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"follow"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 6 #"))))) "
0 0 17 3 36 #";; check if the rest is another cons"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"get-linked"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 5 #")))] "
0 0 17 3 25 #";; Then move to next item"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-linked"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 11 #"))]))      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"follow"
0 0 24 3 2 #" ["
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 79
(
 #";; follows pointers in consV and boxV to find other boxes or cons th"
 #"ey point to"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"boxV?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"boxV-l"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 6 #"follow"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 6 #"boxV-l"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 6 #"))))] "
0 0 17 3 39 #";; add what the box that is pointing to"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"consV?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 6 #"ptHead"
0 0 24 3 2 #" ("
0 0 14 3 7 #"consV-l"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 7 #"consV-l"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 17 3 50 #";; add location that cons points to (head of list)"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 [("
0 0 14 3 7 #"emptyV?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 6 #"ptHead"
0 0 24 3 4 #"))) "
0 0 17 3 33 #";; is the rest of the list empty?"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 6 #"ptHead"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")] "
0 0 17 3 16 #";; add the index"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 [("
0 0 14 3 5 #"boxV?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 1 #" "
0 0 14 3 6 #"ptHead"
0 0 24 3 3 #")) "
0 0 17 3 33 #";; is the head of the list a box?"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 6 #"follow"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 1 #" "
0 0 14 3 6 #"ptHead"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"follow"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 1 #" "
0 0 14 3 6 #"ptHead"
0 0 24 3 5 #")))] "
0 0 17 3 33 #";; follow it and the rest of list"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"follow"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 6 #"ptHead"
0 0 24 3 11 #")))]))))]  "
0 0 17 3 25 #";; check rest of the list"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-garbage"
0 0 24 3 2 #" ["
0 0 14 3 6 #"in-use"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 4 #")] ["
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #") "
0 0 17 3 7 #";; O(n)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 61
#";;builds list of all indicies in my-Store that are not in use"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 10 #"store-size"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 3 #") ("
0 0 14 3 11 #"get-garbage"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-garbage"
0 0 24 3 1 #" "
0 0 14 3 6 #"in-use"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 8 #")))])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-garb"
0 0 24 3 2 #" ["
0 0 14 3 4 #"garb"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 38 #";; frees all locations in garbage list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"garb"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"\\ngarbage removed\\n\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"garb"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"consV?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"garb"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"free-loc"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"garb"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"free-loc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"garb"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 11 #"remove-garb"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"garb"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; type for returning both Value and Store from interp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 3 3 #") ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ["
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"s-expression"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 93
(
 #";; parse S-expressions into a surface representation that can be pro"
 #"grammatically manipulated"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 13 #"s-exp-number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numS"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->number"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 13 #"s-exp-symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                             [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"emptyS"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"varS"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 11 #"s-exp-list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"sl"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 11 #"s-exp-list?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"appS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"case"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 1 #"+"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 54 #"\"Invalid arguments for addition - input two arguments\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"plusS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 1 #"-"
0 0 24 3 4 #")  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 7 #"bminusS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 7 #"uminusS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 4 #"else"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"Invalid arguments for subtraction\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 1 #"*"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 60
#"\"Invalid arguments for multiplication - input two arguments\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"multS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                            [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 72
(
 #"\"Invalid arguments for lambda - input a single var and a body expes"
 #"sion\""
) 0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lamS"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp-symbol?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 64
#"\"Invalid arguments for lambda - first argument must be a symbol\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 4 #"with"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 113
(
 #"\"Invalid arguments for with - input two arguments for the binding e"
 #"xpression and the body expression respectivly\""
) 0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"bpair"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 5 #"withS"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp-symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"bpair"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"bpair"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"Invalid arguments for with - first argument must be a symbol\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 5 #"bpair"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 7 #"))))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 3 #"box"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 48 #"\"Invalid arguments for box - input one argument\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"boxS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 5 #"unbox"
0 0 24 3 4 #")  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                            [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 50 #"\"Invalid arguments for unbox - input one argument\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"unboxS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 8 #"set-box!"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                              [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 54 #"\"Invalid arguments for set-box! - input two arguments\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"setboxS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 15 3 5 #"begin"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"Invalid arguments for begin - input two arguments\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"seqS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 4 #"set!"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 49 #"\"Invalid arguments for set!- input two arguments\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"setS"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp-symbol?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"Invalid arguments for set! - first argument must be a symbol\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 3 #"if0"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 57
#"\"Invalid arguments for if : input three arguments for if\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"if0S"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 15 3 3 #"rec"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 128
(
 #"\"Invalid arguments for rec - input three arguments for the function"
 #" name, the function body, and the expression to be evaluated\""
) 0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"recS"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp-symbol?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 61
#"\"Invalid arguments for rec - first argument must be a symbol\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 4 #"cons"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 5 #"))  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Invalid arguments for cons\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"consS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 5 #"first"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 77
(
 #"\"Invalid arguments for first - input one argument which evaluates t"
 #"o a consV\""
) 0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"firstS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 4 #"rest"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 76
(
 #"\"Invalid arguments for rest - input one argument which evaluates to"
 #" a consV\""
) 0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"restS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"appS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 2 #"sl"
0 0 24 3 9 #")))])]))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 22 #"\" is an invalid input\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"unbox"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 7 #"))))) ("
0 0 14 3 5 #"withS"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"consS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numS"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 5 #"consS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"boxS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numS"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"emptyS"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"unboxS"
0 0 24 3 2 #" ("
0 0 14 3 6 #"firstS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"restS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"varS"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ["
0 0 14 3 2 #"as"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 79
(
 #";; transform programs in surface syntax representation into core rep"
 #"resentation"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 24 3 1 #" "
0 0 14 3 2 #"as"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"numS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"varS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 4 #"varC"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"appS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"plusS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 5 #"plusC"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"bminusS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 5 #"plusC"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 5 #"multC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"multS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 5 #"multC"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"uminusS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 5 #"multC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"lamS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 4 #"lamC"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"withS"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 2 #"be"
0 0 24 3 1 #" "
0 0 14 3 2 #"bb"
0 0 24 3 3 #") ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lamC"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 2 #"bb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 2 #"be"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"boxS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 4 #"boxC"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"unboxS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 6 #"unboxC"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"setboxS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 7 #"setboxC"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"setS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 4 #"setC"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"seqS"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"seqC"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"if0S"
0 0 24 3 2 #" ("
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 4 #"if0C"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"recS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"withS"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numS"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"seqS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"setS"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"consS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 5 #"consC"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"firstS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 6 #"firstC"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"restS"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 5 #"restC"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"emptyS"
0 0 24 3 5 #" () ("
0 0 14 3 6 #"emptyC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"withS"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"consS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numS"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 5 #"consS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"boxS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numS"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"emptyS"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"unboxS"
0 0 24 3 2 #" ("
0 0 14 3 6 #"firstS"
0 0 24 3 2 #" ("
0 0 14 3 5 #"restS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"varS"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 8 #")))))) ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lamC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"unboxC"
0 0 24 3 2 #" ("
0 0 14 3 6 #"firstC"
0 0 24 3 2 #" ("
0 0 14 3 5 #"restC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"varC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 7 #"))))) ("
0 0 14 3 5 #"consC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 5 #"consC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"boxC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"emptyC"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lookup-binding"
0 0 24 3 2 #" ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 58
#";; retrieve the location to which this identifier is bound"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 14 #"lookup-binding"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"to-string"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #") "
0 0 19 3 35 #"\" is an unbound ID in Enviornment \""
0 0 24 3 3 #") ("
0 0 14 3 9 #"to-string"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 9 #"bind-name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #"))) ("
0 0 14 3 8 #"bind-loc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lookup-binding"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ["
0 0 14 3 3 #"loc"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 50 #";; retrieve the value stored in the given location"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-Store"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 2 #" ["
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"sto"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"numC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 3 #"sto"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"varC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lookup-binding"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))  "
0 0 14 3 3 #"sto"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v-f"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"where"
0 0 24 3 2 #" ("
0 0 14 3 7 #"new-loc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"dummy"
0 0 24 3 1 #" "
0 0 14 3 5 #"where"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")  "
0 0 14 3 3 #"s-f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v-a"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-a"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 14 3 6 #"interp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"closV-body"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 2 #" ("
0 0 14 3 11 #"closV-param"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-f"
0 0 24 3 2 #") "
0 0 14 3 5 #"where"
0 0 24 3 3 #") ("
0 0 14 3 9 #"closV-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 14 #"override-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"where"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-a"
0 0 24 3 8 #"))]))])]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"plusC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v-l"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v-r"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num+"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-l"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-r"
0 0 24 3 2 #") "
0 0 14 3 3 #"s-r"
0 0 24 3 6 #")])])]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"multC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v-l"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v-r"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num*"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-l"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-r"
0 0 24 3 2 #") "
0 0 14 3 3 #"s-r"
0 0 24 3 6 #")])])]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"lamC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"closV"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"sto"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"boxC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"where"
0 0 24 3 2 #" ("
0 0 14 3 7 #"new-loc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"dummy"
0 0 24 3 1 #" "
0 0 14 3 5 #"where"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"sto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v-a"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"boxV"
0 0 24 3 1 #" "
0 0 14 3 5 #"where"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 14 #"override-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"where"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-a"
0 0 24 3 6 #"))]))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"unboxC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v-a"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"boxV?"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 6 #"boxV-l"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-a"
0 0 24 3 3 #")) "
0 0 14 3 3 #"s-a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"Invalid arguments for unbox- argument must evaluate to a box\""
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"setboxC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v-b"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"boxV?"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v-a"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 3 #"v*s"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-a"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 14 #"override-store"
0 0 24 3 2 #" ("
0 0 14 3 6 #"boxV-l"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-b"
0 0 24 3 2 #") "
0 0 14 3 3 #"v-a"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 19 3 59
#"\"Invalid Arguments - first argument must evaluate to a box\""
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"setC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v-a"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"where"
0 0 24 3 2 #" ("
0 0 14 3 14 #"lookup-binding"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 3 #"v*s"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-a"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 14 #"override-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"where"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-a"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"seqC"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"v-e1"
0 0 24 3 1 #" "
0 0 14 3 4 #"s-e1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"s-e1"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"if0C"
0 0 24 3 2 #" ("
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 2 #"vt"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numV?"
0 0 24 3 1 #" "
0 0 14 3 2 #"vt"
0 0 24 3 3 #") ("
0 0 14 3 5 #"zero?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 2 #"vt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"firstC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"v*s-v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 2 #"  "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 14 3 6 #"consV?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-Store"
0 0 24 3 2 #" ("
0 0 14 3 7 #"consV-l"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 14 3 3 #"sto"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"first must be followed by a cons\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"restC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 5 #"v*s-v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 2 #"  "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 6 #"consV?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-Store"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"consV-l"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"sto"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"first must be followed by a cons\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"emptyC"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 6 #"emptyV"
0 0 24 3 2 #") "
0 0 14 3 3 #"sto"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"consC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 5 #"where"
0 0 24 3 2 #" ("
0 0 14 3 7 #"new-loc"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 6 #"extEnv"
0 0 24 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"where"
0 0 24 3 3 #") ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"where"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 6 #"extEnv"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 2 #"vf"
0 0 24 3 1 #" "
0 0 14 3 2 #"sf"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 14 #"override-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"where"
0 0 24 3 1 #" "
0 0 14 3 2 #"vf"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 6 #"extEnv"
0 0 24 3 1 #" "
0 0 14 3 2 #"sf"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 2 #"vr"
0 0 24 3 1 #" "
0 0 14 3 2 #"sr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 14 #"override-store"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"where"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                  [("
0 0 14 3 7 #"emptyV?"
0 0 24 3 1 #" "
0 0 14 3 2 #"vr"
0 0 24 3 2 #") "
0 0 14 3 2 #"vr"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                  [("
0 0 14 3 6 #"consV?"
0 0 24 3 1 #" "
0 0 14 3 2 #"vr"
0 0 24 3 2 #") "
0 0 14 3 2 #"vr"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                  ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 24 3 1 #" "
0 0 19 3 58
#"\"the rest of a cons must either be another cons, or empty\""
0 0 24 3 6 #")]))])"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"consV"
0 0 24 3 1 #" "
0 0 14 3 5 #"where"
0 0 24 3 2 #") "
0 0 14 3 3 #"sto"
0 0 24 3 6 #"))]))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 24 29 1 #"\n"
0 0 17 3 63
#";(bind (string->symbol (string-append \"cons\" (to-string where))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num+"
0 0 24 3 2 #" ["
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 3 3 #"] ["
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numV?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 5 #"numV?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"numV"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"num+"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"bad arg\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num*"
0 0 24 3 2 #" ["
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 3 3 #"] ["
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numV?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 5 #"numV?"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"numV"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"num*"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"bad arg\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"asw"
0 0 24 3 2 #" ["
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"s-expression"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 49 #";; A Swell Wrapper function to interp expressions"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 60
#";;  w/out typing interp, desugar and parse and our-functions"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"v*s-v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 14 3 6 #"mt-Env"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-Store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"asw"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 2 #" ("
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 8 #")))))) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 8 #")))))) ("
0 0 14 3 5 #"consV"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"asw"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"unbox"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 7 #"))))) ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"asw"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"56"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 10 #")))))))) ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"asw"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 2 #" ("
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 8 #")))))) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 8 #")))))) ("
0 0 14 3 5 #"consV"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"asw"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"unbox"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 7 #"))))) ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"asw"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 2 #"56"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 10 #")))))))) ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";(asw '(cons 6 (cons (box 90) empty))) -> Out of Memory for (store-s"
 #"ize = 4) "
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";(asw '(unbox (first (cons (box 4) (cons 3 empty))))) -> Out of Memo"
 #"ry for (store-size = 4) "
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";(asw '(with (a (cons (box (box 8)) empty)) a))  -> Out of Memory fo"
 #"r (store-size = 4)"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";(asw '(cons 1 (cons 2 (cons 3 empty))))  -> Out of Memory for (stor"
 #"e-size = 4)"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";(asw '(with (a (box (cons (box 3) empty))) a)) -> Out of Memory for"
 #" (store-size = 4)"
) 0 0 24 29 1 #"\n"
0           0
